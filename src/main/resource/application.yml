server:
  port: 18080

spring:
  application:
    name: spider-app
  profiles:
    active: dev
  #  main:
  #    allow-circular-references: true
  mvc:
    pathmatch:
      matching-strategy: ant_path_matcher
  datasource:
    druid:
      # 开启druid监控和统计功能
      stat-view-servlet:
        enabled: true
        loginUsername: admin
        loginPassword: hdu123456
        allow:
      web-stat-filter:
        enabled: true
        exclusions: "*.js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/*"
    # 动态数据源配置
    dynamic:
      # 连接池信息配置
      druid:
        # 初始化大小，最小，最大
        initial-size: 1
        min-idle: 2
        maxActive: 10
        # 配置获取连接等待超时的时间
        maxWait: 60000
        # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒（暂时配置5分钟关闭一次）
        timeBetweenEvictionRunsMillis: 300000
        # 配置一个连接在池中最小生存的时间，单位是毫秒
        minEvictableIdleTimeMillis: 300000
        testWhileIdle: true
        testOnBorrow: false
        testOnReturn: false
        # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
        filters: stat,wall,slf4j
        # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
        connection-properties:
          druid.stat.mergeSql: true
          druid.stat.slowSqlMillis: 5000
      primary: master #设置默认的数据源或者数据源组,默认值即为master
      strict: false #严格匹配数据源,默认false. true未匹配到指定数据源时抛异常,false使用默认数据源

  # mongo数据库配置


  redis:
    database: 0 # Redis数据库索引（默认为0）
    port: 6937 # Redis服务器连接端口
    password: hdu123456 # Redis服务器连接密码
    timeout: 3000ms # 连接超时时间（毫秒）
    #连接池配置
    lettuce:
      pool:
        max-active: 200   # 连接池最大连接数（使用负值表示没有限制）  类似于mysql的连接池
        max-wait: -1      # 连接池最大阻塞等待时间（使用负值表示没有限制） 表示连接池的链接拿完了 现在去申请需要等待的时间
        max-idle: 10      # 连接池中的最大空闲连接
        min-idle: 0       # 连接池中的最小空闲连接
  data:
    mongodb:
      host: 43.136.43.226
      port: 27017
      username: root
      password: hdu123456
      authentication-database: admin
      database: electron_spider


mybatis-plus:
  mapper-locations: classpath:/mapper/**/*.xml
  global-config:
    db-config:
      id-type: auto
  configuration:
    auto-mapping-behavior: partial
    map-underscore-to-camel-case: true


#监控系统配置
management:
  endpoints:
    web:
      exposure:
        # 暴露端点`/actuator/prometheus`
        include: 'prometheus'
  metrics:
    tags:
      application: ${spring.application.name}


### xxl-job admin address list, such as "http://address" or "http://address01,http://address02"
xxl:
  job:
    executor:
      appname: spider-app
      ### xxl-job executor registry-address: default use address to registry , otherwise use ip:port if address is null
      address: ""
      ### xxl-job executor server-info
      ip: ""
      port: 9999
      ### xxl-job executor log-retention-days
      logretentiondays: 30

############## Sa-Token 配置 (文档: https://sa-token.cc) ##############
sa-token:
  token-prefix: Bearer
  # token 名称（同时也是 cookie 名称）
  token-name: Authorization
  # token 有效期（单位：秒） 默认7天，-1 代表永久有效
  timeout: 604800
  # token 最低活跃频率（单位：秒），这里设置30分钟
  #如果 token 超过此时间没有访问系统就会被冻结，默认-1 代表不限制，永不冻结
  active-timeout: 3600   # 60分钟未活跃则过期
  # 是否允许同一账号多地同时登录 （为 true 时允许一起登录, 为 false 时新登录挤掉旧登录）
  is-concurrent: true
  # 在多人登录同一账号时，是否共用一个 token （为 true 时所有登录共用一个 token, 为 false 时每次登录新建一个 token）
  is-share: true
  # token 风格（默认可取值：uuid、simple-uuid、random-32、random-64、random-128、tik）
  token-style: uuid
  # 是否输出操作日志
  is-log: true
  # jwt秘钥
  jwt-secret-key: hd996yyds
  # 配置 Sa-Token 单独使用的 Redis 连接
  alone-redis:
    # Redis鉴权数据库索引（默认为0）
    database: 3
    # Redis服务器地址
    host: ${spring.redis.host}
    # Redis服务器连接端口
    port: ${spring.redis.port}
    # Redis服务器连接密码（默认为空）
    password: ${spring.redis.password} # Redis服务器连接密码
    # 连接超时时间
    timeout: 10s